import sys
import os
import utils

in_folder = './input_files'
out_folder = './output_results'

def punch_it():
    '''
inspect in folder for img files
iterate over found files
    load file into numpy array
    generate matching .png file if non-existent
    run blob detector on .png file to find blob centers
    round blob centers generated by cv2 to get indices of numpy array
    feed sub sections of numpy array to blob_assessor
    store results of blob assessor to .txt file
    '''
    files = os.listdir(in_folder)
    for name in files:
        if not '.img' in name:
            continue
        file_flow(name)

def file_flow(file_name):
    new_img_name = file_name[:-3]+'png'
    origin = os.path.join(in_folder, file_name)
    png_dest = os.path.join(out_folder, new_img_name)
    raw_img_data = utils.load_data(origin)
    if not os.path.isfile(png_dest):
        utils.converter(raw_img_data, png_dest)
    identified_blobs = utils.blob_finding(png_dest)
    if len(identified_blobs)>20 or len(identified_blobs)<10:
        #some kind of sanity check here
        print('weird number of blobs found')
        print(png_dest)
        return
    centers = utils.sort_blobs(identified_blobs)
    print(centers)
    processed_rows = []
    for row in centers:
        results = []
        for center in row:
            intensity = utils.process_blob(center, raw_img_data)
            results.append(intensity)
        processed_rows.append(results)
    utils.save_results(processed_rows, png_dest)
    return

if __name__ == '__main__':
    punch_it()
